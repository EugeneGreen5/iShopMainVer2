// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using iShopMain.Data;

#nullable disable

namespace iShopMainVer2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230520194658_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("iShopMain.Models.Entity.UserInfo.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5afe3981-5971-4c0e-817c-94350534b6ff"),
                            Login = "alesha@mail.ru",
                            Password = "3C9909AFEC25354D551DAE21590BB26E38D53F2173B8D3DC3EEE4C047E7AB1C1EB8B85103E3BE7BA613B31BB5C9C36214DC9F14A42FD7A2FDB84856BCA5C44C2"
                        },
                        new
                        {
                            Id = new Guid("ad8b5f49-09b0-43b7-96d9-0287e1ed00de"),
                            Login = "petr@gmail.com",
                            Password = "3043AA4A83B0934982956A90828140CB834869135B5F294938865DE12E036DE440A330E1E8529BEC15DDD59F18D1161A97BFEC110D2622680F2C714A737D7061"
                        });
                });

            modelBuilder.Entity("iShopMain.Models.Entity.UserInfo.InformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfRegistration")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("information", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("18b92259-a31d-484e-836a-3bf91b6c1e26"),
                            DateOfRegistration = new DateOnly(2023, 5, 20),
                            Email = "alesha@mail.ru",
                            Name = "Алексей",
                            Patronymic = "Васильевич",
                            PhoneNumber = "+32112345698",
                            Surname = "Иванов"
                        },
                        new
                        {
                            Id = new Guid("59204603-a957-4481-a1b0-f7a0613c647c"),
                            DateOfRegistration = new DateOnly(2023, 5, 20),
                            Email = "petr@gmail.com",
                            Name = "Petr",
                            Patronymic = "Sergeevich",
                            PhoneNumber = "+12345689093",
                            Surname = "Vasiliev"
                        });
                });

            modelBuilder.Entity("iShopMain.Models.Entity.UserInfo.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InformationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InformationId");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d36ba0c-b580-4843-8440-e553f2939449"),
                            AccountId = new Guid("5afe3981-5971-4c0e-817c-94350534b6ff"),
                            InformationId = new Guid("18b92259-a31d-484e-836a-3bf91b6c1e26"),
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("aae3e209-cba1-4d1a-982f-13a035f2eff1"),
                            AccountId = new Guid("ad8b5f49-09b0-43b7-96d9-0287e1ed00de"),
                            InformationId = new Guid("59204603-a957-4481-a1b0-f7a0613c647c"),
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Characteristic.CameraEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MainCamera")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaximumFrequencyVideo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaximumResolutionVideo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UltraWideAngleCamera")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WebCamera")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZoomCamera")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("camera", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Characteristic.CharacteristicEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CameraEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CameraId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GeneralCharacteristicEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GeneralCharacteristicsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialsEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemoryAndProcessorEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemoryAndProcessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PowerEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PowerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScreenEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScreenId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CameraEntityId");

                    b.HasIndex("GeneralCharacteristicEntityId");

                    b.HasIndex("MaterialsEntityId");

                    b.HasIndex("MemoryAndProcessorEntityId");

                    b.HasIndex("PowerEntityId");

                    b.HasIndex("ScreenEntityId");

                    b.ToTable("characteristic", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Characteristic.GeneralCharacteristicEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperationSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductServiceLife")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WarrantyPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("general_characteristic", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Characteristic.MaterialsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MaterialBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("materials", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Characteristic.MemoryAndProcessorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfProcessorCores")
                        .HasColumnType("integer");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("memory_and_processor", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Characteristic.PowerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatteryCapacity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsFastCharging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPowerUnit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWirelessCharging")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeOfChargingConnector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("power", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Characteristic.ScreenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DiagonalScreen")
                        .HasColumnType("integer");

                    b.Property<int>("FrequencyScreen")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTouchScreen")
                        .HasColumnType("boolean");

                    b.Property<string>("ResolutionScreen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeScreen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("screen", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Order.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Entrance")
                        .HasColumnType("integer");

                    b.Property<int>("Flat")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<int>("House")
                        .HasColumnType("integer");

                    b.Property<int>("Housing")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Order.ElementOrderEntity", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("AmountProduct")
                        .HasColumnType("integer");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("element_order", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Order.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<double>("OrderAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Products.OverviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("overview", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Products.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountOnWarehouse")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OverviewId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("OverviewId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Products.SelectedProductEntity", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("selected_product", (string)null);
                });

            modelBuilder.Entity("iShopMain.Models.Entity.UserInfo.UserEntity", b =>
                {
                    b.HasOne("iShopMain.Models.Entity.UserInfo.AccountEntity", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iShopMain.Models.Entity.UserInfo.InformationEntity", "Information")
                        .WithMany()
                        .HasForeignKey("InformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Information");
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Characteristic.CharacteristicEntity", b =>
                {
                    b.HasOne("iShopMainVer2.Models.Entity.Characteristic.CameraEntity", "CameraEntity")
                        .WithMany()
                        .HasForeignKey("CameraEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iShopMainVer2.Models.Entity.Characteristic.GeneralCharacteristicEntity", "GeneralCharacteristicEntity")
                        .WithMany()
                        .HasForeignKey("GeneralCharacteristicEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iShopMainVer2.Models.Entity.Characteristic.MaterialsEntity", "MaterialsEntity")
                        .WithMany()
                        .HasForeignKey("MaterialsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iShopMainVer2.Models.Entity.Characteristic.MemoryAndProcessorEntity", "MemoryAndProcessorEntity")
                        .WithMany()
                        .HasForeignKey("MemoryAndProcessorEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iShopMainVer2.Models.Entity.Characteristic.PowerEntity", "PowerEntity")
                        .WithMany()
                        .HasForeignKey("PowerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iShopMainVer2.Models.Entity.Characteristic.ScreenEntity", "ScreenEntity")
                        .WithMany()
                        .HasForeignKey("ScreenEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CameraEntity");

                    b.Navigation("GeneralCharacteristicEntity");

                    b.Navigation("MaterialsEntity");

                    b.Navigation("MemoryAndProcessorEntity");

                    b.Navigation("PowerEntity");

                    b.Navigation("ScreenEntity");
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Order.AddressEntity", b =>
                {
                    b.HasOne("iShopMainVer2.Models.Entity.Order.OrderEntity", null)
                        .WithOne("Address")
                        .HasForeignKey("iShopMainVer2.Models.Entity.Order.AddressEntity", "Id")
                        .HasPrincipalKey("iShopMainVer2.Models.Entity.Order.OrderEntity", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Order.ElementOrderEntity", b =>
                {
                    b.HasOne("iShopMainVer2.Models.Entity.Order.OrderEntity", "Order")
                        .WithMany("ElementsOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iShopMainVer2.Models.Entity.Products.ProductEntity", "Product")
                        .WithMany("ElementOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Order.OrderEntity", b =>
                {
                    b.HasOne("iShopMain.Models.Entity.UserInfo.UserEntity", "User")
                        .WithMany("OrderList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Products.ProductEntity", b =>
                {
                    b.HasOne("iShopMainVer2.Models.Entity.Characteristic.CharacteristicEntity", "Characteristic")
                        .WithMany()
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iShopMainVer2.Models.Entity.Products.OverviewEntity", "Overview")
                        .WithMany()
                        .HasForeignKey("OverviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("Overview");
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Products.SelectedProductEntity", b =>
                {
                    b.HasOne("iShopMainVer2.Models.Entity.Products.ProductEntity", "Product")
                        .WithMany("SelectedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iShopMain.Models.Entity.UserInfo.UserEntity", "User")
                        .WithMany("SelectedProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iShopMain.Models.Entity.UserInfo.UserEntity", b =>
                {
                    b.Navigation("OrderList");

                    b.Navigation("SelectedProducts");
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Order.OrderEntity", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ElementsOrders");
                });

            modelBuilder.Entity("iShopMainVer2.Models.Entity.Products.ProductEntity", b =>
                {
                    b.Navigation("ElementOrders");

                    b.Navigation("SelectedProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
